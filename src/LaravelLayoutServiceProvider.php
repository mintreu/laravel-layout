<?php

namespace Mintreu\LaravelLayout;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Str;
use Illuminate\View\Compilers\ComponentTagCompiler;
use Mintreu\LaravelLayout\Commands\Traits\hasFilesManipulator;
use Mintreu\LaravelLayout\View\AppLayout;
use Mintreu\LaravelLayout\View\Theme;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;
use Mintreu\LaravelLayout\Commands\LaravelLayoutCommand;

class LaravelLayoutServiceProvider extends PackageServiceProvider
{
    use hasFilesManipulator;

    public function configurePackage(Package $package): void
    {
        /*
         * This class is a Package Service Provider
         *
         * More info: https://github.com/spatie/laravel-package-tools
         */
        $package
            ->name('laravel-layout')
           ->hasConfigFile()
            ->hasViews()
//            ->hasMigration('create_laravel-layout_table')
            ->hasCommand(LaravelLayoutCommand::class);
    }


    public function registeringPackage()
    {





        parent::registeringPackage(); // TODO: Change the autogenerated stub
    }


    /**
     * @return void
     */
    public function bootingPackage()
    {
        $this->loadLayoutDirectives();
        Blade::component('layout::layout', AppLayout::class);
        Blade::component('layout::theme', Theme::class);
        parent::bootingPackage(); // TODO: Change the autogenerated stub
    }


    /**
     * @return void
     */
    protected function loadLayoutDirectives()
    {
        Blade::directive('asset', function (string $filename) {
            return file_exists(public_path($filename)) ? asset($filename) : asset(config('layout.asset.path').'/'.$filename);
        });

        Blade::directive('img', function (string $filename) {
            if(file_exists(public_path($filename)))
            {
                $path = asset($filename);
            }elseif (file_exists(public_path(config('layout.asset.path').'/'.$filename)))
            {
                $path = asset(config('layout.asset.path').'/'.$filename);
            }else{
                if (!file_exists(public_path('/error.gif')))
                {
                    $this->copyStubToApp('error',public_path('/error.gif'),[],'gif');
                }
                if(file_exists(public_path('error.gif')))
                {
                    $path = asset('error.gif');
                }elseif (file_exists(public_path(config('layout.asset.path').'/error.gif'))){
                    $path = asset(config('layout.asset.path').'/error.gif');
                }else{
                    $path='asset-url-environment-value-not-set-properly';
                }
            }
            return $path;
        });
    }





}
